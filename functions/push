#!/bin/bash

# Color variables for better readability
BRIGHT_YELLOW='\033[1;33m'
BRIGHT_GREEN='\033[1;32m'
BRIGHT_RED='\033[1;31m'
NC='\033[0m' # No Color

# Function to check if a remote is set
check_remote() {
  if ! git remote get-url origin &> /dev/null; then
    return 1 # Remote is not set
  fi
  return 0 # Remote is set
}

# Function to check for unstaged or uncommitted changes
check_changes() {
  # Check for unstaged changes
  if ! git diff --quiet; then
    echo -e "${BRIGHT_YELLOW}There are unstaged changes.${NC}"
    return 1
  fi

  # Check for uncommitted changes
  if ! git diff --cached --quiet; then
    echo -e "${BRIGHT_YELLOW}There are uncommitted changes.${NC}"
    return 2
  fi

  return 0 # No changes
}

# Function to stage and commit all changes
stage_and_commit() {
  read -p "Do you want to stage and commit all files? (y/n): " choice
  if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
    git add .
    read -p "Enter a commit message: " commit_message
    if git commit -m "$commit_message"; then
      echo -e "${BRIGHT_GREEN}All changes staged and committed.${NC}"
    else
      echo -e "${BRIGHT_RED}Failed to commit changes.${NC}"
      return 1
    fi
  fi
  return 0
}

# Push function
push() {
  if ! check_remote; then
    echo -e "${BRIGHT_YELLOW}Remote repository is not set.${NC}"
    echo -e "\n"
    read -p "Enter a remote server URL: " remote_url
    if git remote add origin "$remote_url"; then
      echo -e "${BRIGHT_GREEN}Remote repository set to: $remote_url${NC}"
    else
      echo -e "${BRIGHT_RED}Failed to add remote repository.${NC}"
      return 1
    fi
  fi
  change_status=$(check_changes)
  if [[ $? -ne 0 ]]; then
    if [[ $change_status -eq 1 ]]; then
      echo -e "${BRIGHT_YELLOW}There are unstaged changes.${NC}"
    elif [[ $change_status -eq 2 ]]; then
      echo -e "${BRIGHT_YELLOW}There are uncommitted changes.${NC}"
    fi
    stage_and_commit || return 1
  fi

  # Push to the remote repository
  if git push; then
    echo -e "${BRIGHT_GREEN}Code successfully pushed to remote.${NC}"
  else
    echo -e "${BRIGHT_RED}Failed to push to remote.${NC}"
  fi
}

# View the current remote URL
view_remote() {
  if ! check_remote; then
    echo -e "${BRIGHT_YELLOW}Remote repository is not set.${NC}"
  else
    current_url=$(git remote get-url origin)
    echo -e "${BRIGHT_GREEN}Current remote repository URL is: $current_url${NC}"
  fi
}

# Function to set a remote URL
set_remote() {
  read -p "Enter Remote URL: " remote_url
  if git remote add origin "$remote_url"; then
    echo -e "${BRIGHT_GREEN}Remote repository set to: $remote_url${NC}"
  else
    echo -e "${BRIGHT_RED}Failed to add remote repository.${NC}"
    return 1
  fi
}

push_branch() {
  if ! check_remote; then
    echo -e "${BRIGHT_YELLOW}Remote repository is not set.${NC}"
    return 1
  fi

  # Ask user for branch name to push
  read -p "Enter the branch you want to push to: " branch_name

  # Check if the branch exists locally
  if git show-ref --quiet refs/heads/"$branch_name"; then
    # Branch exists, proceed with push
    if git push origin "$branch_name"; then
      echo -e "${BRIGHT_GREEN}Branch '$branch_name' successfully pushed to remote.${NC}"
    else
      echo -e "${BRIGHT_RED}Failed to push branch '$branch_name' to remote.${NC}"
      return 1
    fi
  else
    # Branch does not exist
    echo -e "${BRIGHT_RED}Branch '$branch_name' does not exist locally.${NC}"
    return 1
  fi
}
